tosca_definitions_version: tosca_simple_yaml_1_0

policy_types:

  tosca.policies.Scaling.cQueue:
    derived_from: tosca.policies.Scaling
    description: base policy defining sources, constants and queries for the cqueue stack
    properties:
      sources:
        type: list
        description: sources to use, as a list
        default:
          - 'rabbitmq_exporter:8090'
          - '192.168.154.97:8090'
          - 'docker_exporter:7090'
        required: false
      constants:
        type: map
        description: constants as a dictionary
        default:
          CONTAINERNAME: "vina"
          QUEUE: "machinery_tasks"
          DEADLINE: 1520604900
          MAX: 10
        required: false
      queries:
        type: map
        description: queries to consider as a dictionary
        default:
          AET: 'avg(docker_container_execution_time{container="{{CONTAINERNAME}}"})'
          REMAININGTIME: '{{DEADLINE}}-time()'
          ITEMS: 'rabbitmq_queue_messages_persistent{queue="{{QUEUE}}"}'
          AvgCPULoadOfNodes: '100-(avg(rate(node_cpu{mode="idle"}[60s]))*100)'
        required: false
      alerts:
        type: list
        description: sources to use, as a list
        default:
          - alert: time_elapsed
            expr: 'vector(1525268017-time()) < 0'
            for: 1m
          - alert: worker_overloaded
            expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100))>60'
            for: 1m
          - alert: worker_underloaded
            expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100))<20'
            for: 1m
        required: false


  tosca.policies.Scaling.cQueue.CPULoad:
    derived_from: tosca.policies.Scaling.cQueue
    description: scale up or down depending on average CPU load
    properties:
      stage:
        type: string
        description: the stage that will be affected by the policy
        default: started
        required: false
      priority:
        type: integer
        description: the priority with which the policy will be exectued
        default: 100
        required: false
      max_instances:
        type: integer
        required: true
        description: defines the max instances to scale to
      min_instances:
        type: integer
        required: true
        description: defines the min instances to scale to
      scaling_rule:
        type: string
        description: scaling targets, this is hardcoded
        default: |
          if AvgCPULoadOfNodes>90: instances++
          if AvgCPULoadOfNodes<50: instances--
        required: false

  tosca.policies.Scaling.cQueue.Completion:
    derived_from: tosca.policies.Scaling.cQueue
    description: scale up or down depending on completion time
    properties:
      stage:
        type: string
        description: the stage that will be affected by the policy
        default: started
        required: false
      priority:
        type: integer
        description: the priority with which the policy will be exectued
        default: 100
        required: false
      max_instances:
        type: integer
        required: false
        description: defines the max instances to scale to
      min_instances:
        type: integer
        required: false
        description: defines the min instances to scale to
      scaling_rule:
        type: string
        description: scaling targets, this is hardcoded
        default: |
          if ITEMS>0:
            instances = ceil(AET/(REMAININGTIME/ITEMS)) if REMAININGTIME>0 else MAX
          else:
            instances = 0
        required: false
